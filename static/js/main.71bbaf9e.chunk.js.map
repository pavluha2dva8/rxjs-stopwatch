{"version":3,"sources":["components/Display.js","components/Buttons.js","App.js","index.js"],"names":["Display","props","hours","minutes","seconds","Buttons","useEffect","mouse$","fromEvent","document","getElementById","buff$","pipe","debounceTime","buffer","map","list","length","filter","x","subscribe","wait","className","onClick","start","buttonStatus","id","reset","App","useState","setSeconds","setMinutes","setHours","timerStatus","setTimerStatus","setButtonStatus","destroy$","Subject","Observable","observer","setInterval","next","takeUntil","prev","complete","prevState","ReactDOM","render"],"mappings":"4LAaeA,EAXC,SAACC,GAEb,OACI,gCACI,+BAAQA,EAAMC,OAAS,GAAMD,EAAMC,MAAQ,IAAMD,EAAMC,QAD3D,IAEI,+BAAQD,EAAME,SAAW,GAAMF,EAAME,QAAU,IAAMF,EAAME,UAF/D,IAGI,+BAAQF,EAAMG,SAAW,GAAMH,EAAMG,QAAU,IAAMH,EAAMG,c,wCC4BxDC,EA/BC,SAACJ,GAsBb,OApBAK,qBAAU,WACN,IAAMC,EAASC,YAAUC,SAASC,eAAe,WAAY,SAEvDC,EAAQJ,EAAOK,KACjBC,YAAa,MAGFN,EAAOK,KAClBE,YAAOH,GACPI,aAAI,SAAAC,GACA,OAAOA,EAAKC,UAEhBC,aAAO,SAAAC,GAAC,OAAU,IAANA,MAGTC,WAAU,WACbnB,EAAMoB,YAEX,CAACpB,IAGA,gCACI,wBAAQqB,UAAU,SAASC,QAAStB,EAAMuB,MAA1C,SAAkDvB,EAAMwB,eACxD,wBAAQH,UAAU,SAASI,GAAG,UAA9B,kBACA,wBAAQJ,UAAU,SAASC,QAAStB,EAAM0B,MAA1C,uB,wBC6CGC,MArEf,WAAgB,IAAD,EACmBC,mBAAS,GAD5B,mBACJzB,EADI,KACK0B,EADL,OAEmBD,mBAAS,GAF5B,mBAEJ1B,EAFI,KAEK4B,EAFL,OAGeF,mBAAS,GAHxB,mBAGJ3B,EAHI,KAGG8B,EAHH,OAI2BH,oBAAS,GAJpC,mBAIJI,EAJI,KAISC,EAJT,OAK6BL,mBAAS,SALtC,mBAKJJ,EALI,KAKUU,EALV,KAuDX,OA/CA7B,qBAAU,WACoC6B,EAAzCF,EAAyD,OAA3B,SAE/B,IAAMG,EAAW,IAAIC,IAarB,OATmB,IAAIC,KAAW,SAAAC,GAC9BC,aAAY,kBAAMD,EAASE,SAAQ,QAE5B7B,KAAK8B,YAAUN,IACrBhB,WAAU,WACHa,GACAH,GAAW,SAAAa,GAAI,QAAMA,QAG1B,WACHP,EAASK,OACTL,EAASQ,cAGd,CAACX,IAiBY,KAAZ7B,IACA0B,EAAW,GACXC,GAAW,SAAAY,GAAI,QAAMA,MAET,KAAZxC,IACA4B,EAAW,GACXC,GAAS,SAAAW,GAAI,QAAMA,MAInB,sBAAKrB,UAAU,YAAf,UACI,qBAAKA,UAAU,UAAf,SACI,cAAC,EAAD,CAASpB,MAAOA,EAAOC,QAASA,EAASC,QAASA,MAEtD,qBAAKkB,UAAU,UAAf,SACI,cAAC,EAAD,CAASE,MA9BP,WACVU,GAAe,SAAAW,GAAS,OAAKA,KACR,SAAjBpB,GAAyBK,EAAW,IA4BTT,KAzBtB,WACO,IAAZjB,GAAe8B,GAAe,IAwBSP,MArBjC,WACVG,EAAW,GACXC,EAAW,GACXC,EAAS,GACO,IAAZ5B,GAAe8B,GAAe,IAiBuBT,aAAcA,UChE/EqB,IAASC,OACL,cAAC,EAAD,IACAtC,SAASC,eAAe,W","file":"static/js/main.71bbaf9e.chunk.js","sourcesContent":["import '../App.css';\r\n\r\nconst Display = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <span>{(props.hours >= 10) ? props.hours : '0' + props.hours}</span>:\r\n            <span>{(props.minutes >= 10) ? props.minutes : '0' + props.minutes}</span>:\r\n            <span>{(props.seconds >= 10) ? props.seconds : '0' + props.seconds}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Display","import {fromEvent,} from 'rxjs';\r\nimport {map, buffer, debounceTime, filter} from 'rxjs/operators';\r\nimport {useEffect} from \"react\";\r\nimport '../App.css';\r\n\r\nconst Buttons = (props) => {\r\n    // Double click\r\n    useEffect(() => {\r\n        const mouse$ = fromEvent(document.getElementById('clickMe'), 'click')\r\n\r\n        const buff$ = mouse$.pipe(\r\n            debounceTime(250),\r\n        )\r\n\r\n        const click$ = mouse$.pipe(\r\n            buffer(buff$),\r\n            map(list => {\r\n                return list.length;\r\n            }),\r\n            filter(x => x === 2),\r\n        )\r\n\r\n        click$.subscribe(() => {\r\n            props.wait()\r\n        })\r\n    }, [props]);\r\n\r\n    return (\r\n        <div>\r\n            <button className='button' onClick={props.start}>{props.buttonStatus}</button>\r\n            <button className='button' id=\"clickMe\">Wait</button>\r\n            <button className='button' onClick={props.reset}>Reset</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Buttons","import React, { useEffect, useState } from \"react\";\nimport './App.css';\nimport Display from \"./components/Display\";\nimport Buttons from \"./components/Buttons\";\nimport { Observable, Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nfunction App() {\n    const [seconds, setSeconds] = useState(0)\n    const [minutes, setMinutes] = useState(0)\n    const [hours, setHours] = useState(0)\n    const [timerStatus, setTimerStatus] = useState(false)\n    const [buttonStatus, setButtonStatus] = useState('Start')\n\n\n    useEffect(() => {\n        !timerStatus ? setButtonStatus('Start') : setButtonStatus('Stop')\n\n        const destroy$ = new Subject()\n\n        // Set Interval 1s, I can use interval(1000) that returns observable,\n        // but in task need to use new Observable.\n        const observable = new Observable(observer => {\n            setInterval(() => observer.next(), 1000)\n        })\n        observable.pipe(takeUntil(destroy$))\n            .subscribe(() => {\n                if (timerStatus) {\n                    setSeconds(prev => ++prev)\n                }\n            })\n        return () => {\n            destroy$.next()\n            destroy$.complete()\n        }\n\n    }, [timerStatus])\n\n    const start = () => {\n        setTimerStatus(prevState => !prevState)\n        if (buttonStatus === 'Stop') setSeconds(0)\n    }\n\n    const wait = () => {\n        if (seconds !== 0) setTimerStatus(false)\n    }\n\n    const reset = () => {\n        setSeconds(0)\n        setMinutes(0)\n        setHours(0)\n        if (seconds !== 0) setTimerStatus(true)\n    }\n    if (seconds === 60) {\n        setSeconds(0)\n        setMinutes(prev => ++prev)\n    }\n    if (minutes === 60) {\n        setMinutes(0)\n        setHours(prev => ++prev)\n    }\n\n    return (\n        <div className='container'>\n            <div className='display'>\n                <Display hours={hours} minutes={minutes} seconds={seconds} />\n            </div>\n            <div className='buttons'>\n                <Buttons start={start} wait={wait} reset={reset} buttonStatus={buttonStatus} />\n            </div>\n\n\n        </div>\n    )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}